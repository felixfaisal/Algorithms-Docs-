(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{108:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return m}));var n=r(0),i=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=i.a.createContext({}),u=function(e){var t=i.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=u(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},f=i.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(r),f=n,m=p["".concat(o,".").concat(f)]||p[f]||d[f]||a;return r?i.a.createElement(m,s(s({ref:t},l),{},{components:r})):i.a.createElement(m,s({ref:t},l))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,o=new Array(a);o[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var l=2;l<a;l++)o[l]=r[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},84:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return s})),r.d(t,"toc",(function(){return c})),r.d(t,"default",(function(){return u}));var n=r(3),i=r(7),a=(r(0),r(108)),o={sidebar_position:5},s={unversionedId:"tutorial-basics/QuickSort",id:"tutorial-basics/QuickSort",isDocsHomePage:!1,title:"QuickSort",description:"Like Merge Sort, QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. There are many different versions of quickSort that pick pivot in different ways.",source:"@site/docs/tutorial-basics/QuickSort.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/QuickSort",permalink:"/Algorithms-Docs-/docs/tutorial-basics/QuickSort",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/tutorial-basics/QuickSort.md",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Selection Sort",permalink:"/Algorithms-Docs-/docs/tutorial-basics/SelectionSort"}},c=[{value:"Code",id:"code",children:[]},{value:"Output",id:"output",children:[]}],l={toc:c};function u(e){var t=e.components,r=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Like Merge Sort, QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. There are many different versions of quickSort that pick pivot in different ways. "),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Always pick first element as pivot."),Object(a.b)("li",{parentName:"ul"},"Always pick last element as pivot (implemented below)"),Object(a.b)("li",{parentName:"ul"},"Pick a random element as pivot."),Object(a.b)("li",{parentName:"ul"},"Pick median as pivot.")),Object(a.b)("p",null,"The key process in quickSort is partition(). Target of partitions is, given an array and an element x of array as pivot, put x at its correct position in sorted array and put all smaller elements (smaller than x) before x, and put all greater elements (greater than x) after x. All this should be done in linear time."),Object(a.b)("h2",{id:"code"},"Code"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-rust"},'mod sort;\nfn partition(mut arr: [i32; 7], left: usize, right: usize) -> (usize, [i32; 7]) {\n    // pivot (Element to be placed at right position)\n    let pivot = arr[right];\n    let leftI = left as i32;\n    let mut i: i32 = leftI - 1;\n    for j in left..right {\n        if arr[j] < pivot {\n            i = i + 1; // increment index of smaller element\n            let temp = arr[i as usize];\n            arr[i as usize] = arr[j];\n            arr[j] = temp; // swap arr[i] and arr[j]\n        }\n    }\n    // swap arr[i + 1] and arr[high])\n    let finalpos = i + 1;\n    let temp = arr[right];\n    arr[right] = arr[finalpos as usize];\n    arr[finalpos as usize] = temp;\n    (finalpos as usize, arr)\n}\n\nfn quick_sort(mut arr: [i32; 7], left: usize, right: usize) -> [i32; 7] {\n    if left < right {\n        // let pi: usize;\n        let (pi, x) = partition(arr, left, right);\n        arr = x.clone();\n        arr = quick_sort(arr, left, pi - 1); // Before pi\n        arr = quick_sort(arr, pi, right); // After pi\n    }\n    arr\n}\nfn main() {\n    let mut arr = [64, 34, 25, 8, 22, 11, 9];\n    arr = quick_sort(arr, 0, arr.len() - 1);\n    println!("Sorted array is {:?}", arr);\n}\n')),Object(a.b)("h2",{id:"output"},"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"    Finished dev [unoptimized + debuginfo] target(s) in 0.55s\n     Running `target/debug/algo`\nSorted array is [8, 9, 11, 22, 25, 34, 64]\n")))}u.isMDXComponent=!0}}]);