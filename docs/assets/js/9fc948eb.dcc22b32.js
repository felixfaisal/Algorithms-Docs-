(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{108:function(e,t,r){"use strict";r.d(t,"a",(function(){return m})),r.d(t,"b",(function(){return b}));var n=r(0),i=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var u=i.a.createContext({}),l=function(e){var t=i.a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},m=function(e){var t=l(e.components);return i.a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},p=i.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,a=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=l(r),p=n,b=m["".concat(a,".").concat(p)]||m[p]||d[p]||o;return r?i.a.createElement(b,c(c({ref:t},u),{},{components:r})):i.a.createElement(b,c({ref:t},u))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,a=new Array(o);a[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,a[1]=c;for(var u=2;u<o;u++)a[u]=r[u];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},89:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return a})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return s})),r.d(t,"default",(function(){return l}));var n=r(3),i=r(7),o=(r(0),r(108)),a={sidebar_position:4},c={unversionedId:"tutorial-basics/SelectionSort",id:"tutorial-basics/SelectionSort",isDocsHomePage:!1,title:"Selection Sort",description:"The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning. The algorithm maintains two subarrays in a given array.",source:"@site/docs/tutorial-basics/SelectionSort.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/SelectionSort",permalink:"/Algorithms-Docs-/docs/tutorial-basics/SelectionSort",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/tutorial-basics/SelectionSort.md",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Merge Sort",permalink:"/Algorithms-Docs-/docs/tutorial-basics/MergeSort"},next:{title:"QuickSort",permalink:"/Algorithms-Docs-/docs/tutorial-basics/QuickSort"}},s=[{value:"Code",id:"code",children:[]},{value:"Output",id:"output",children:[]}],u={toc:s};function l(e){var t=e.components,r=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},u,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning. The algorithm maintains two subarrays in a given array."),Object(o.b)("p",null,"1) The subarray which is already sorted."),Object(o.b)("p",null,"2) Remaining subarray which is unsorted."),Object(o.b)("p",null,"In every iteration of selection sort, the minimum element (considering ascending order) from the unsorted subarray is picked and moved to the sorted subarray."),Object(o.b)("h2",{id:"code"},"Code"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-rust"},'fn selection_sort(mut arr: [i32; 7]) -> [i32; 7] {\n    let mut min;\n    for i in 0..arr.len() - 1 {\n        min = i;\n        for j in i + 1..arr.len() {\n            // Finding the minimum element in the array\n            if arr[j] < arr[min] {\n                min = j;\n            }\n        }\n        // Swap the found minimum element with the first element\n        let temp = arr[i];\n        arr[i] = arr[min];\n        arr[min] = temp;\n    }\n    arr\n}\nfn main() {\n    let mut arr = [64, 34, 25, 12, 22, 11, 9];\n    arr = selection_sort(arr);\n    println!("Sorted array is {:?}", arr);\n}\n')),Object(o.b)("h2",{id:"output"},"Output"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"    Finished dev [unoptimized + debuginfo] target(s) in 0.53s\n     Running `target/debug/algo`\nSorted array is [9, 11, 12, 22, 25, 34, 64]\n")))}l.isMDXComponent=!0}}]);