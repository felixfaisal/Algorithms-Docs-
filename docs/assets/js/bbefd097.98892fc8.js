(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{108:function(e,r,t){"use strict";t.d(r,"a",(function(){return d})),t.d(r,"b",(function(){return f}));var n=t(0),a=t.n(n);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),u=function(e){var r=a.a.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},d=function(e){var r=u(e.components);return a.a.createElement(c.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return a.a.createElement(a.a.Fragment,{},r)}},p=a.a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(t),p=n,f=d["".concat(o,".").concat(p)]||d[p]||m[p]||i;return t?a.a.createElement(f,s(s({ref:r},c),{},{components:t})):a.a.createElement(f,s({ref:r},c))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=p;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},95:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return o})),t.d(r,"metadata",(function(){return s})),t.d(r,"toc",(function(){return l})),t.d(r,"default",(function(){return u}));var n=t(3),a=t(7),i=(t(0),t(108)),o={sidebar_position:4},s={unversionedId:"tutorial-basics/MergeSort",id:"tutorial-basics/MergeSort",isDocsHomePage:!1,title:"Merge Sort",description:"Like QuickSort, Merge Sort is a Divide and Conquer algorithm. It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves. The merge() function is used for merging two halves. The merge(arr, l, m, r) is a key process that assumes that arr[l..m] and arr[m+1..r] are sorted and merges the two sorted sub-arrays into one",source:"@site/docs/tutorial-basics/MergeSort.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/MergeSort",permalink:"/Algorithms-Docs-/docs/tutorial-basics/MergeSort",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/tutorial-basics/MergeSort.md",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Bubble Sort",permalink:"/Algorithms-Docs-/docs/tutorial-basics/BubbleSort"},next:{title:"Selection Sort",permalink:"/Algorithms-Docs-/docs/tutorial-basics/SelectionSort"}},l=[{value:"Pseudocode",id:"pseudocode",children:[]},{value:"Code",id:"code",children:[]},{value:"Output",id:"output",children:[]}],c={toc:l};function u(e){var r=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,t,{components:r,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Like QuickSort, Merge Sort is a ",Object(i.b)("strong",{parentName:"p"},"Divide and Conquer")," algorithm. It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves. The merge() function is used for merging two halves. The ",Object(i.b)("inlineCode",{parentName:"p"},"merge(arr, l, m, r)")," is a key process that assumes that arr","[l..m]"," and arr","[m+1..r]"," are sorted and merges the two sorted sub-arrays into one"),Object(i.b)("h2",{id:"pseudocode"},"Pseudocode"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"MergeSort(arr[], l,  r)\nIf r > l\n     1. Find the middle point to divide the array into two halves:  \n             middle m = l+ (r-l)/2\n     2. Call mergeSort for first half:   \n             Call mergeSort(arr, l, m)\n     3. Call mergeSort for second half:\n             Call mergeSort(arr, m+1, r)\n     4. Merge the two halves sorted in step 2 and 3:\n             Call merge(arr, l, m, r)\n")),Object(i.b)("h2",{id:"code"},"Code"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-rust"},'fn merge(mut arr: [i32; 7], left: usize, mid: usize, right: usize) -> [i32; 7] {\n    let n1 = mid - left;\n    let n2 = right - mid;\n    let mut L1 = arr.clone();\n    let mut R1 = arr.clone();\n    let L = &L1[left..mid];\n    let R = &R1[mid..right];\n    /* Merge the temp arrays back into arr[l..r]*/\n    let mut i = 0; // Initial index of first subarray\n    let mut j = 0; // Initial index of second subarray\n    let mut k = left; // Initial index of merged subarray\n    while i < n1 && j < n2 {\n        if L[i] < R[j] {\n            arr[k] = L[i];\n            i = i + 1;\n        } else {\n            arr[k] = R[j];\n            j = j + 1;\n        }\n        k = k + 1;\n    }\n    while i < n1 {\n        arr[k] = L[i];\n        i = i + 1;\n        k = k + 1;\n    }\n    /* Copy the remaining elements of R[], if there\n    are any */\n    while j < n2 {\n        arr[k] = R[j];\n        j = j + 1;\n        k = k + 1;\n    }\n    arr\n}\nfn merge_sort(mut arr: [i32; 7], left: usize, right: usize) -> [i32; 7] {\n    if right - 1 > left {\n        let mid = left + (right - left) / 2;\n        arr = merge_sort(arr, left, mid);\n        arr = merge_sort(arr, mid, right);\n        arr = merge(arr, left, mid, right);\n    }\n    arr\n}\n\nfn main() {\n    let mut arr = [64, 34, 25, 8, 22, 11, 9];\n    arr = merge_sort(arr, 0, arr.len());\n    println!("Sorted array is {:?}", arr);\n}\n')),Object(i.b)("h2",{id:"output"},"Output"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"    Finished dev [unoptimized + debuginfo] target(s) in 0.35s\n     Running `target/debug/algo`\nSorted array is [8, 9, 11, 22, 25, 34, 64]\n")))}u.isMDXComponent=!0}}]);