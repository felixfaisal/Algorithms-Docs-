(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(3),r=n(7),i=(n(0),n(110)),o={sidebar_position:1},s={unversionedId:"tutorial-basics/LinearSearch",id:"tutorial-basics/LinearSearch",isDocsHomePage:!1,title:"Linear Search",description:"Algorithm implemented in Rust",source:"@site/docs/tutorial-basics/LinearSearch.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/LinearSearch",permalink:"/Algorithms-Docs-/docs/tutorial-basics/LinearSearch",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/tutorial-basics/LinearSearch.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Binary Search",permalink:"/Algorithms-Docs-/docs/tutorial-basics/BinarySearch"},next:{title:"Bubble Sort",permalink:"/Algorithms-Docs-/docs/tutorial-basics/MergeSort"}},c=[{value:"Pseudocode",id:"pseudocode",children:[]},{value:"Code",id:"code",children:[]},{value:"Output",id:"output",children:[]}],l={toc:c};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Important ")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"Algorithm implemented in Rust"))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Linear search")," is rarely used practically because other search algorithms such as the binary search algorithm and hash tables allow significantly faster-searching comparison to Linear search."),Object(i.b)("p",null,"The time complexity of the linear search algorithm is ",Object(i.b)("inlineCode",{parentName:"p"},"O(n)"),". "),Object(i.b)("h2",{id:"pseudocode"},"Pseudocode"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"Step 1:- Start from the first element and iterate through the array \nStep 2:- If element is found then break the loop \nStep 3:- If loop completes, Print element not found\n")),Object(i.b)("h2",{id:"code"},"Code"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-rust"},'fn linear_search(key: i32, arr: [i32; 9]) {\n    let mut flag = false;\n    for item in 0..arr.len() - 1 {\n        if arr[item] == key {\n            // element found in the array\n            println!("Element found at index {} ", item);\n            flag = true;\n            break;\n        }\n    }\n    if flag == false {\n        // Meaning element is not present in the array\n        println!("Element not present in the array");\n    }\n}\n\nfn main() {\n    let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]; // Sorted array\n    linear_search(20, arr);\n    linear_search(8, arr);\n}\n')),Object(i.b)("h2",{id:"output"},"Output"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"    Finished dev [unoptimized + debuginfo] target(s) in 0.28s\n     Running `target/debug/algo`\nElement not present in the array\nElement found at index 7  \n")))}d.isMDXComponent=!0}}]);