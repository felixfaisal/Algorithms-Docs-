(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{108:function(e,r,t){"use strict";t.d(r,"a",(function(){return b})),t.d(r,"b",(function(){return f}));var n=t(0),o=t.n(n);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function u(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),l=function(e){var r=o.a.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},b=function(e){var r=l(e.components);return o.a.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return o.a.createElement(o.a.Fragment,{},r)}},d=o.a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),b=l(t),d=n,f=b["".concat(i,".").concat(d)]||b[d]||p[d]||a;return t?o.a.createElement(f,c(c({ref:r},s),{},{components:t})):o.a.createElement(f,c({ref:r},s))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var u in r)hasOwnProperty.call(r,u)&&(c[u]=r[u]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},85:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return i})),t.d(r,"metadata",(function(){return c})),t.d(r,"toc",(function(){return u})),t.d(r,"default",(function(){return l}));var n=t(3),o=t(7),a=(t(0),t(108)),i={sidebar_position:3},c={unversionedId:"tutorial-basics/BubbleSort",id:"tutorial-basics/BubbleSort",isDocsHomePage:!1,title:"Bubble Sort",description:"Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.",source:"@site/docs/tutorial-basics/BubbleSort.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/BubbleSort",permalink:"/Algorithms-Docs-/docs/tutorial-basics/BubbleSort",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/tutorial-basics/BubbleSort.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Linear Search",permalink:"/Algorithms-Docs-/docs/tutorial-basics/LinearSearch"},next:{title:"Merge Sort",permalink:"/Algorithms-Docs-/docs/tutorial-basics/MergeSort"}},u=[{value:"Code",id:"code",children:[]},{value:"Output",id:"output",children:[]}],s={toc:u};function l(e){var r=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},s,t,{components:r,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Bubble Sort")," is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order."),Object(a.b)("h2",{id:"code"},"Code"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-rust"},'fn bubble_sort(mut arr: [i32; 7]) -> [i32; 7] {\n    for i in 0..arr.len() {\n        for j in 0..arr.len() - i - 1 {\n            if arr[j] > arr[j + 1] {\n                let temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    arr\n}\nfn main() {\n    let mut arr = [64, 34, 25, 12, 22, 11, 9];\n    arr = bubble_sort(arr);\n    println!("Sorted array is {:?}", arr);\n} \n')),Object(a.b)("h2",{id:"output"},"Output"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"    Finished dev [unoptimized + debuginfo] target(s) in 0.34s\n     Running `target/debug/algo`\nSorted array is [9, 11, 12, 22, 25, 34, 64] \n")))}l.isMDXComponent=!0}}]);